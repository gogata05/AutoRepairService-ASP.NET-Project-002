// <auto-generated />
using System;
using AutoRepairService.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AutoRepairService.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AutoRepairService.Infrastructure.Data.EntityModels.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CarCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Mileage")
                        .HasColumnType("int");

                    b.Property<string>("ModelOfCar")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CarCategoryId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Cars");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Brand = "BMW",
                            CarCategoryId = 2,
                            Description = "Best BMW",
                            ImageUrl = "https://cdn.images.autoexposure.co.uk/AETA35653/AETV53606122_1.jpg",
                            IsActive = true,
                            Mileage = 11000,
                            ModelOfCar = "BMW M2",
                            OwnerId = "d6b3ac1f-4fc8-d726-83d9-6d5800ce591e",
                            Price = 104000.00m,
                            Year = 2019
                        },
                        new
                        {
                            Id = 2,
                            Brand = "Audi",
                            CarCategoryId = 2,
                            Description = "The perfect car for your needs",
                            ImageUrl = "https://g1-bg.cars.bg/2023-10-26_2/653a77ef6cc86d6a120fd702o.jpg",
                            IsActive = true,
                            Mileage = 3000,
                            ModelOfCar = "Audi A8 50 TDI Quattro",
                            OwnerId = "d6b3ac1f-4fc8-d726-83d9-6d5800ce591e",
                            Price = 80000.00m,
                            Year = 2018
                        },
                        new
                        {
                            Id = 3,
                            Brand = "Tesla",
                            CarCategoryId = 1,
                            Description = "The best electric car",
                            ImageUrl = "https://g1-bg.cars.bg/2024-01-25_2/65b241748c69930ca00ce4a5o.jpg",
                            IsActive = true,
                            Mileage = 1500,
                            ModelOfCar = "Tesla Model S P100D Ludicrous",
                            OwnerId = "d6b3ac1f-4fc8-d726-83d9-6d5800ce591e",
                            Price = 99998.00m,
                            Year = 2023
                        },
                        new
                        {
                            Id = 4,
                            Brand = "Lamborghini",
                            CarCategoryId = 2,
                            Description = "The best Lamborghini of your needs",
                            ImageUrl = "https://g1-bg.cars.bg/2023-04-13_1/6437991c6e760656610960a2o.jpg",
                            IsActive = true,
                            Mileage = 5000,
                            ModelOfCar = "Lamborghini Aventador SCarbonRoadster",
                            OwnerId = "d6b3ac1f-4fc8-d726-83d9-6d5800ce591e",
                            Price = 787000.00m,
                            Year = 2018
                        },
                        new
                        {
                            Id = 5,
                            Brand = "Ferrari",
                            CarCategoryId = 2,
                            Description = "The best Ferrari of your needs",
                            ImageUrl = "https://g1-bg.cars.bg/2023-03-20_2/641855494eccd5535d08a6e2o.jpg",
                            IsActive = true,
                            Mileage = 200,
                            ModelOfCar = "Ferrari F8 Tributo",
                            OwnerId = "d6b3ac1f-4fc8-d726-83d9-6d5800ce591e",
                            Price = 99998.00m,
                            Year = 2021
                        },
                        new
                        {
                            Id = 6,
                            Brand = "McLaren",
                            CarCategoryId = 2,
                            Description = "The best McLaren of your needs.",
                            ImageUrl = "https://g1-bg.cars.bg/2023-04-13_1/64378e28d3b9b43ce0008b32o.jpg",
                            IsActive = true,
                            Mileage = 700,
                            ModelOfCar = "McLaren 600 LT Clubsport",
                            OwnerId = "d6b3ac1f-4fc8-d726-83d9-6d5800ce591e",
                            Price = 489000.00m,
                            Year = 2019
                        },
                        new
                        {
                            Id = 7,
                            Brand = "Aston Martin",
                            CarCategoryId = 4,
                            Description = "The best Aston Martin for your needs",
                            ImageUrl = "https://g1-bg.cars.bg/2023-04-13_1/64379b4670903523a40449b6o.jpg",
                            IsActive = true,
                            Mileage = 400,
                            ModelOfCar = "Aston Martin DB11 V8 Coupe",
                            OwnerId = "d6b3ac1f-4fc8-d726-83d9-6d5800ce591e",
                            Price = 461000.00m,
                            Year = 2023
                        });
                });

            modelBuilder.Entity("AutoRepairService.Infrastructure.Data.EntityModels.CarCart", b =>
                {
                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.HasKey("CarId", "CartId");

                    b.HasIndex("CartId");

                    b.ToTable("CarCart");
                });

            modelBuilder.Entity("AutoRepairService.Infrastructure.Data.EntityModels.CarCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("CarsCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Electric and Hybrid"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Sport"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Sedan"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Coupe"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Minivan"
                        },
                        new
                        {
                            Id = 6,
                            Name = "SUV"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Crossover"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Hatchback"
                        });
                });

            modelBuilder.Entity("AutoRepairService.Infrastructure.Data.EntityModels.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("AutoRepairService.Infrastructure.Data.EntityModels.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConnectionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("AutoRepairService.Infrastructure.Data.EntityModels.Offer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool?>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Offers");
                });

            modelBuilder.Entity("AutoRepairService.Infrastructure.Data.EntityModels.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CompletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<string>("ItemsDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderAdress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReceivedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalCost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("AutoRepairService.Infrastructure.Data.EntityModels.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comment")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("MechanicId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int>("RepairId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("AutoRepairService.Infrastructure.Data.EntityModels.Repair", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CarModel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTaken")
                        .HasColumnType("bit");

                    b.Property<string>("MechanicId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OwnerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RepairCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("RepairStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("RepairCategoryId");

                    b.HasIndex("RepairStatusId");

                    b.ToTable("Repairs");
                });

            modelBuilder.Entity("AutoRepairService.Infrastructure.Data.EntityModels.RepairCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("RepairsCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "General Maintenance"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Engine and Transmission"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Electrical Systems"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Suspension and Brakes"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Bodywork"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Exhaust Systems"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Tires and Alignment"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("AutoRepairService.Infrastructure.Data.EntityModels.RepairOffer", b =>
                {
                    b.Property<int>("RepairId")
                        .HasColumnType("int");

                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.HasKey("RepairId", "OfferId");

                    b.HasIndex("OfferId");

                    b.ToTable("RepairOffer");
                });

            modelBuilder.Entity("AutoRepairService.Infrastructure.Data.EntityModels.RepairStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RepairStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Pending"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Approved"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Declined"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Deleted"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Completed"
                        });
                });

            modelBuilder.Entity("AutoRepairService.Infrastructure.Data.EntityModels.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsMechanic")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dea12856-c198-4129-b3f3-b893d8395082",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "541d0f46-3483-4788-86bf-158b9e7d6ec5",
                            Email = "mechanic@mail.com",
                            EmailConfirmed = false,
                            IsMechanic = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MECHANIC@MAIL.COM",
                            NormalizedUserName = "MECHANIC",
                            PasswordHash = "AQAAAAEAACcQAAAAEC4uUiaCb4/TfQprmp07BxRJxgbOKfrl0hn4yMTNsu2AmyUUyNZ2tGoFtBTYWHQgsw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "96456245-2ca5-466e-9bf5-b9c05da8544a",
                            TwoFactorEnabled = false,
                            UserName = "mechanic"
                        },
                        new
                        {
                            Id = "6d5800ce-d726-4fc8-83d9-d6b3ac1f591e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fa350aad-aa6b-422a-9dbf-21376f0668e9",
                            Email = "customer@mail.com",
                            EmailConfirmed = false,
                            IsMechanic = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMER@MAIL.COM",
                            NormalizedUserName = "CUSTOMER",
                            PasswordHash = "AQAAAAEAACcQAAAAEDrti2eue3pYrFPsXVkRRxoT0wilJACfiBb16M+pAVX0I7wK8pT9zuJw/swFkWr5Rw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3c907fc2-9726-4f53-80d3-781035d4d4cb",
                            TwoFactorEnabled = false,
                            UserName = "customer"
                        },
                        new
                        {
                            Id = "d6b3ac1f-4fc8-d726-83d9-6d5800ce591e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "34387ab7-cea7-4627-b826-6a6705186ee1",
                            Email = "admin@mail.com",
                            EmailConfirmed = false,
                            IsMechanic = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@MAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEE1cgPv03puDVIWpIlh+FvAGMX7qvwOxmYqe16drgkyRuMb1Q/9SEVV6tVdUoCt8XA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "20ecef9b-45ba-4de7-be36-e72ad2d724ee",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1e62f853-4a41-4652-b9a9-8e8b236e24c7",
                            ConcurrencyStamp = "1fa54d33-a8ba-47b1-be64-02d6d4836152",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "5d937746-9833-4886-83d1-3c125ad5294c",
                            ConcurrencyStamp = "80196750-3beb-42a1-b321-0aa9c9f41275",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = "c8a8cf93-46b1-4e79-871a-1f4742a0db83",
                            ConcurrencyStamp = "292f8d0e-c368-4cf1-bb0a-b8cda6096ea9",
                            Name = "Mechanic",
                            NormalizedName = "MECHANIC"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "d6b3ac1f-4fc8-d726-83d9-6d5800ce591e",
                            RoleId = "1e62f853-4a41-4652-b9a9-8e8b236e24c7"
                        },
                        new
                        {
                            UserId = "6d5800ce-d726-4fc8-83d9-d6b3ac1f591e",
                            RoleId = "5d937746-9833-4886-83d1-3c125ad5294c"
                        },
                        new
                        {
                            UserId = "dea12856-c198-4129-b3f3-b893d8395082",
                            RoleId = "c8a8cf93-46b1-4e79-871a-1f4742a0db83"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AutoRepairService.Infrastructure.Data.EntityModels.Car", b =>
                {
                    b.HasOne("AutoRepairService.Infrastructure.Data.EntityModels.CarCategory", "Category")
                        .WithMany("Cars")
                        .HasForeignKey("CarCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AutoRepairService.Infrastructure.Data.EntityModels.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("AutoRepairService.Infrastructure.Data.EntityModels.CarCart", b =>
                {
                    b.HasOne("AutoRepairService.Infrastructure.Data.EntityModels.Car", "Car")
                        .WithMany("CarsCarts")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AutoRepairService.Infrastructure.Data.EntityModels.Cart", "Cart")
                        .WithMany()
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Cart");
                });

            modelBuilder.Entity("AutoRepairService.Infrastructure.Data.EntityModels.Cart", b =>
                {
                    b.HasOne("AutoRepairService.Infrastructure.Data.EntityModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AutoRepairService.Infrastructure.Data.EntityModels.Offer", b =>
                {
                    b.HasOne("AutoRepairService.Infrastructure.Data.EntityModels.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("AutoRepairService.Infrastructure.Data.EntityModels.Order", b =>
                {
                    b.HasOne("AutoRepairService.Infrastructure.Data.EntityModels.User", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("AutoRepairService.Infrastructure.Data.EntityModels.Repair", b =>
                {
                    b.HasOne("AutoRepairService.Infrastructure.Data.EntityModels.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AutoRepairService.Infrastructure.Data.EntityModels.RepairCategory", "Category")
                        .WithMany("Repairs")
                        .HasForeignKey("RepairCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AutoRepairService.Infrastructure.Data.EntityModels.RepairStatus", "RepairStatus")
                        .WithMany("Repairs")
                        .HasForeignKey("RepairStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Owner");

                    b.Navigation("RepairStatus");
                });

            modelBuilder.Entity("AutoRepairService.Infrastructure.Data.EntityModels.RepairOffer", b =>
                {
                    b.HasOne("AutoRepairService.Infrastructure.Data.EntityModels.Offer", "Offer")
                        .WithMany("RepairsOffers")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AutoRepairService.Infrastructure.Data.EntityModels.Repair", "Repair")
                        .WithMany("RepairsOffers")
                        .HasForeignKey("RepairId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Offer");

                    b.Navigation("Repair");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AutoRepairService.Infrastructure.Data.EntityModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AutoRepairService.Infrastructure.Data.EntityModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutoRepairService.Infrastructure.Data.EntityModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AutoRepairService.Infrastructure.Data.EntityModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AutoRepairService.Infrastructure.Data.EntityModels.Car", b =>
                {
                    b.Navigation("CarsCarts");
                });

            modelBuilder.Entity("AutoRepairService.Infrastructure.Data.EntityModels.CarCategory", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("AutoRepairService.Infrastructure.Data.EntityModels.Offer", b =>
                {
                    b.Navigation("RepairsOffers");
                });

            modelBuilder.Entity("AutoRepairService.Infrastructure.Data.EntityModels.Repair", b =>
                {
                    b.Navigation("RepairsOffers");
                });

            modelBuilder.Entity("AutoRepairService.Infrastructure.Data.EntityModels.RepairCategory", b =>
                {
                    b.Navigation("Repairs");
                });

            modelBuilder.Entity("AutoRepairService.Infrastructure.Data.EntityModels.RepairStatus", b =>
                {
                    b.Navigation("Repairs");
                });
#pragma warning restore 612, 618
        }
    }
}
